"""
The Comptroller type has protocol level variables stored
"""
type Comptroller @entity {
    "ID is set to comptroller address"
    id: Bytes!
    "Address of price oracle the comptroller uses"
    priceOracle: Bytes!
    "Factor used to determine repayAmount for liquidating"
    closeFactor: BigInt!
    "The percent bonus liquidators get for liquidating"
    liquidationIncentive: BigInt!
    "Max assets a single user can enter"
    maxAssets: BigInt!
}

"""
Market stores all high level variables for a vToken market
"""
type Market @entity {
    "VToken address"
    id: Bytes!
    #Fields that match Venus API
    "Flag indicating if the market is listed"
    isListed: Boolean!
    "Borrow rate per block"
    borrowRateMantissa: BigInt!
    "The vToken contract balance of BEP20 or BNB"
    cashMantissa: BigInt!
    "Collateral factor determining how much one can borrow"
    collateralFactorMantissa: BigInt!
    "Exchange rate of tokens / vTokens"
    exchangeRateMantissa:  BigInt!
    "Address of the interest rate model"
    interestRateModelAddress: Bytes!
    "Name of the vToken"
    name: String!
    "Reserves stored in the contract"
    reservesMantissa: BigInt!
    "Supply rate per block"
    supplyRateMantissa: BigInt!
    "VToken symbol"
    symbol: String!
    "Borrows in the market"
    totalBorrowsMantissa: BigInt!
    "Total vToken supplied"
    totalSupplyVTokenMantissa: BigInt!
    "Underlying token address"
    underlyingAddress: Bytes!
    "Underlying token name"
    underlyingName: String!
    "Underlying token symbol"
    underlyingSymbol: String!
    "XVS Supply Distribution Block"
    xvsSupplyStateBlock:  BigInt!
    "XVS Supply Distribution Index"
    xvsSupplyStateIndex:  BigInt!
    "XVS Reward Distribution Block"
    xvsBorrowStateBlock:  BigInt!
    "XVS Reward Distribution Index"
    xvsBorrowStateIndex:  BigInt!

    # Fields that are not in Venus api
    "Block the market is updated to"
    accrualBlockNumber: BigInt!
    "Timestamp the market was most recently updated"
    blockTimestamp: Int!
    "The history of the markets borrow index return (Think S&P 500)"
    borrowIndex: BigInt!
    "The factor determining interest that goes to reserves"
    reserveFactor: BigInt!
    "Last recorded Underlying token price in USD cents"
    lastUnderlyingPriceCents: BigInt!
    "Block price was last updated"
    lastUnderlyingPriceBlockNumber: BigInt!
    "Underlying token decimal length"
    underlyingDecimals: Int!
    "Total XVS Distributed for this market"
    totalXvsDistributedMantissa: BigInt!
    "vToken decimal length"
    vTokenDecimals: Int!

    "Number of accounts currently supplying to this market"
    supplierCount: BigInt!

    "Number of accounts with reasonable borrow positions in this market (excludes accounts with dust (potentially left over from liquidations))"
    borrowerCountAdjusted: BigInt!

    "Number of accounts currently borrowing from this market"
    borrowerCount: BigInt!
}

"""
Account is an BNB address, with a list of all vToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
    "User BNB address"
    id: Bytes!
    "Array of VTokens user is in"
    tokens: [AccountVToken!]! @derivedFrom(field: "account")
    "Count user has been liquidated"
    countLiquidated: Int!
    "Count user has liquidated others"
    countLiquidator: Int!
    "True if user has ever borrowed"
    hasBorrowed: Boolean!
}

"""
AccountVToken is a single account within a single vToken market, with data such
as interest earned or paid
"""
type AccountVToken @entity {
    "Concatenation of VToken address and user address"
    id: Bytes!
    "Relation to market"
    market: Market!
    "Relation to user"
    account: Account!
    "Borrow Index this position last accrued interest"
    borrowIndex: BigInt!
    "True if user is entered, false if they are exited"
    enteredMarket: Boolean!
    "VToken balance of the user"
    vTokenBalanceMantissa: BigInt!
    "Total amount of underlying redeemed"
    totalUnderlyingRedeemedMantissa: BigInt!
    "Total amount underlying repaid"
    totalUnderlyingRepaidMantissa: BigInt!
    "Stored borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
    storedBorrowBalanceMantissa: BigInt!
}

enum EventType {
    MINT
    MINT_BEHALF
    REDEEM
    BORROW
    TRANSFER
    LIQUIDATE
    REPAY
}

"""
An interface for a transfer of any vToken. TransferEvent, MintEvent,
RedeemEvent, and LiquidationEvent all use this interface
"""
type Transaction @entity {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "enum of event type"
    type: EventType!
    "The account that sent the tokens, usually vToken"
    from: Bytes!
    "count of vTokens transferred"
    amountMantissa: BigInt!
    "Account that received tokens"
    to: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
}
