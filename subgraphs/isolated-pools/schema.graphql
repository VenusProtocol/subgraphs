"""
The Pool entity
"""
type Pool @entity {
    "Pool Address as id"
    id: Bytes!
    "Name of the pool"
    name: String!
    "Creator of the pool"
    creator: Bytes!
    "Block where the market was created"
    blockPosted: BigInt!
    "Timestamp of market creation"
    timestampPosted: BigInt!
    "Category that the pool belongs too"
    category: String!
    "Url for pool logo"
    logoUrl: String!
    "Description of the pool"
    description: String!
    "Address of price oracle the comptroller uses"
    priceOracleAddress: Bytes!
    "Factor used to determine repayAmount for liquidating"
    closeFactorMantissa: BigInt!
    "The percent bonus liquidators get for liquidating"
    liquidationIncentiveMantissa: BigInt!
    "Min Liquidatable Amount allowed"
    minLiquidatableCollateralMantissa: BigInt!
    "Markets associated to this pool"
    markets: [Market!]! @derivedFrom(field: "pool")

    "Reward distributors distributing rewards for markets in this pool"
    rewardsDistributors: [RewardsDistributor!]! @derivedFrom(field: "pool")
}

"""
enum MarketPauseGuardianAction {
  Mint = "Mint",
  Borrow = "Borrow",
}
"""
type MarketAction @entity {
    "Concatentation of address and action"
    id: Bytes!
    "vToken Address affected"
    vToken: Bytes!
    "Action (Borrow, Mint)"
    action: String!
    "True if paused, otherwise False if active"
    pauseState: Boolean!
}

"""
Market stores all high level variables for a vToken market
"""
type Market @entity {
    "VToken address"
    id: Bytes!
    "Pool the market belongs to"
    pool: Pool!
    #Fields that match Venus API
    "Name of the vToken"
    name: String!
    "Flag for if the token is listed"
    isListed: Boolean!
    "Borrow rate per block"
    borrowRateMantissa: BigInt!
    "The vToken contract balance of BEP20 or BNB"
    cashMantissa: BigInt!
    "Collateral factor determining how much one can borrow"
    collateralFactorMantissa: BigInt!
    "Exchange rate of tokens / vTokens"
    exchangeRateMantissa:  BigInt!
    "Address of the interest rate model"
    interestRateModelAddress: Bytes!
    "Reserves stored in the contract"
    reservesMantissa: BigInt!
    "Supply rate per block"
    supplyRateMantissa: BigInt!
    "VToken symbol"
    symbol: String!
    "Underlying token address"
    underlyingAddress: Bytes!
    "Underlying token name"
    underlyingName: String!
    "Underlying token symbol"
    underlyingSymbol: String!
    "Max token borrow amount allowed"
    borrowCapMantissa: BigInt!
    "Total borrowed underlying token"
    totalBorrowsMantissa: BigInt!
    "Total vToken supplied"
    totalSupplyVTokenMantissa: BigInt!

    # Fields that are not in Venus api
    "Block the market is updated to"
    accrualBlockNumber: BigInt!
    "Timestamp the market was most recently updated"
    blockTimestamp: Int!
    "The history of the markets borrow index return (Think S&P 500)"
    borrowIndexMantissa: BigInt!
    "The factor determining interest that goes to reserves"
    reserveFactorMantissa: BigInt!
    "Underlying token price in USD cents (updated based on the last received event)"
    underlyingPriceCentsMantissa: BigInt!
    "Underlying token decimal length"
    underlyingDecimals: Int!
    "vToken decimal length"
    vTokenDecimals: Int!

    "Supply cap set for market"
    supplyCapMantissa: BigInt!
    "The amount of bad debt in the market"
    badDebtMantissa: BigInt!
    "Contract address for the Access Control Manager"
    accessControlManagerAddress: Bytes

    "Number of accounts currently supplying to this market"
    supplierCount: BigInt!
    "Number of accounts currently borrowing from this market"
    borrowerCount: BigInt!

    "Multiplier representing the collateralization after which the borrow is eligible for liquidation"
    liquidationThresholdMantissa: BigInt!

    "Accounts who participate in this market"
    accounts: [AccountVToken!]! @derivedFrom(field:"market")
}

"""
Account is an BNB address, with a list of all vToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
    "User address"
    id: Bytes!
    "Pools the user is participating on"
    pools: [AccountPool!]! @derivedFrom(field: "account")
    "Count user has been liquidated"
    countLiquidated: Int!
    "Count user has liquidated others"
    countLiquidator: Int!
    "True if user has ever borrowed"
    hasBorrowed: Boolean!
}

"""
Through entity for aggregating positions by pool and account
"""
type AccountPool @entity(immutable: true) {
    "Joined Account address and Pool address"
    id: Bytes!
    pool: Pool!
    account: Account!
    tokens: [AccountVToken!]! @derivedFrom(field:"accountPool")
}

"""
AccountVToken is a single account within a single vToken market, with data such
as interest earned or paid
"""
type AccountVToken @entity {
    "Concatenation of VToken address and user address"
    id: Bytes!
    "Pool of the market"
    accountPool: AccountPool!
    "Relation to market"
    market: Market!
    "Relation to user"
    account: Account!
    "Bad debt data for the account in the market"
    badDebt: [AccountVTokenBadDebt!]! @derivedFrom(field:"account")
    "Block number this asset was updated at in the contract"
    accrualBlockNumber: BigInt!
    "Borrow Index this position last accrued interest"
    borrowIndex: BigInt!
    "vToken balance representing underlying supplied to the market, underlying balance can be calculated with the exchange rate"
    vTokenBalanceMantissa: BigInt!
    "Stored borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
    storedBorrowBalanceMantissa: BigInt!
    "True if user is entered, false if they are exited"
    enteredMarket: Boolean!
    "Total amount of underlying redeemed"
    totalUnderlyingRedeemedMantissa: BigInt!
    "Total amount underlying repaid"
    totalUnderlyingRepaidMantissa: BigInt!
}

"""
Auxiliary entity for AccountVToken indicating when a certain amount of bad debt was healed
"""
type AccountVTokenBadDebt @entity {
    "Concatenation of borrower and vToken Address"
    id: Bytes!
    "Market that was healed"
    account: AccountVToken!
    "Amount that was healed"
    amountMantissa: BigInt!
    "Timestamp"
    timestamp: BigInt!
    "Block Number"
    block: BigInt!
}

enum EventType {
    MINT
    REDEEM
    BORROW
    TRANSFER
    LIQUIDATE
    REPAY
}

"""
Entity recording transactions for interacting with markets
"""
type Transaction @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "enum of event type"
    type: EventType!
    "The account that sent the transaction, for example sender of vToken"
    from: Bytes!
    "count of vTokens transferred"
    amountMantissa: BigInt!
    "Account that received tokens"
    to: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
}

"""
An interface for rewards distributor that distribute rewards to isolated pools
"""
type RewardsDistributor @entity {
    "Address of the rewards distributor"
    id: Bytes!
    "Address of the pool"
    pool: Pool!
    "Address of the reward token"
    reward: Bytes!
    "Distribution rate for suppliers"
    rewardSpeeds: [RewardSpeed!]! @derivedFrom(field:"rewardsDistributor")
}

"""
A interface for rewards distributor that distribute rewards to isolated pools
"""
type RewardSpeed @entity {
    "ID created from the reward distributor and market this speed applies to"
    id: Bytes!
    "Address of rewards distributor"
    rewardsDistributor: RewardsDistributor!
    "Address of the market this speed applies to"
    market: Market!
    "Distribution rate for borrowers"
    borrowSpeedPerBlockMantissa: BigInt
    "Distribution rate for suppliers"
    supplySpeedPerBlockMantissa: BigInt
}
